{
    "docs": [
        {
            "location": "/", 
            "text": "DynamicalBilliards.jl\n is an easy-to-use, modular and extendable Julia package for Dynamical Billiard systems in two dimensions. \n\n\n\n\nLogo billiard\n\n\nCheckout the \nJulia billiard animation\n  code to see how to create the animated billiard of our logo.\n\n\n\n\nA dynamical billiard is a system where a particle is propagating as a straight line from obstacle-to-obstacle, performing specular reflection at the boundary of the obstacles. Billiard systems have been used extensively in chaos and nonlinear dynamics and played an important role in the development of nonlinear science.\n\n\nThe \"standard\" billiard described above can be extended in many ways. The \nwikipedia page\n has many examples of different types of billiards. The types that are currently offered by this package, besides the standard one, are magnetic and ray-splitting billiards. In a magnetic billiard the particle's orbit is a circle (like electrons in a perpendicular magnetic field). In ray-splitting (aka semiclassical) billiards the particle may propagate \nthrough\n an obstacle, given some arbitrary transmission and refraction law.\n\n\nThis package does not support finite-sized particles and, as a result, there is also no support for collision between particles.\n\n\n\n\nInstallation\n\n\n\n\nThis package is registered, simply use \nPkg.add(\"DynamicalBilliards\")\n to install it. The \nstable documentation\n accompanies the version installed with \nPkg.add()\n.\n\n\n\n\nPyPlot dependency\n\n\nThis package has a dependency on \nPyPlot\n for its plotting features, because of its maturity, detailed documentation and vast library of features. If you are not sure about how to install PyPlot, simply run the commands: \nENV[\"PYTHON\"]=\"\"; Pkg.add(\"PyCall\"); Pkg.add(\"PyPlot\"); using PyPlot;\n\n\n\n\nIf you want to use the latest features, compatible with the \nlatest documentation\n, use \nPkg.checkout(\"DynamicalBilliards\")\n.\n\n\nAfter the first installation, it is advised to run the short tests to be sure that everything works as expected. This will only take about 2 minutes:\n\n\nusing\n \nDynamicalBilliards\n\n\ntest_options\n(\nprint_info\n \n=\n \ntrue\n)\n\n\nPkg\n.\ntest\n(\nDynamicalBilliards\n)\n\n\n\n\n\n\nIf you do not want to see what tests are done, do not use any keywords. If you use this package for scientific research, you should run the long tests at least once. To do this, pass the keyword argument \nlong_tests = true\n to the \ntest_options\n function. These tests take on average 20 minutes to complete.\n\n\n\n\nUsage\n\n\n\n\nFor a crash course on how to use \nDynamicalBilliards.jl\n, you should visit the \nBasic Usage\n section.\n\n\nIf however, you want to make the most out it, the following tutorials offer detailed descriptions:\n\n\n\n\nHow to define your custom Billiard Table\n\n\nUsing Ray-Splitting billiards\n\n\nVisualizing the billiard table and animating the particle's evolution\n\n\nCreating your own Obstacle Type\n\n\nExamples page\n\n\n\n\nThe \nLibrary\n section has the docstrings of all exported names in convenient groups.\n\n\n\n\nJulia Billiard Animation\n\n\nThe animation of a particle inside a \"Julia\" billiard was generated with the code:\n\n\nusing\n \nDynamicalBilliards\n\n\n\nbt\n \n=\n \nbilliard_julia\n(\nplotit\n \n=\n \ntrue\n)\n\n\np\n \n=\n \nrandominside\n(\nbt\n)\n\n\n\ndarkblue\n \n=\n \n(\n64\n/\n255\n,\n \n99\n/\n255\n,\n \n216\n/\n255\n)\n\n\nlightblue\n \n=\n \n(\n102\n/\n255\n,\n \n130\n/\n255\n,\n \n223\n/\n255\n)\n\n\nokwargs\n \n=\n \nDict\n(\n:\nlinewidth\n \n=\n \n2.0\n,\n \n:\ncolor\n \n=\n \nlightblue\n)\n\n\npkwargs\n \n=\n \nDict\n(\n:\ncolor\n \n=\n \ndarkblue\n,\n \n:\ns\n \n=\n \n150.0\n)\n\n\n\nsname\n \n=\n \nC:\n\\\\\n****\n\\\\\nanim\n\n\n\nanimate_evolution\n(\np\n,\n \nbt\n,\n \n200\n;\n \ncol_to_plot\n \n=\n \n7\n,\n\n\nparticle_kwargs\n \n=\n \npkwargs\n,\n \norbit_kwargs\n \n=\n \nokwargs\n,\n\n\nsavefigs\n \n=\n \ntrue\n,\n \nsavename\n \n=\n \nsname\n)\n\n\n\n# use gifmaker.me to merge all figures into one .gif\n\n\n# in a future upadte, automatic support will be added", 
            "title": "Introduction"
        }, 
        {
            "location": "/#installation", 
            "text": "This package is registered, simply use  Pkg.add(\"DynamicalBilliards\")  to install it. The  stable documentation  accompanies the version installed with  Pkg.add() .   PyPlot dependency  This package has a dependency on  PyPlot  for its plotting features, because of its maturity, detailed documentation and vast library of features. If you are not sure about how to install PyPlot, simply run the commands:  ENV[\"PYTHON\"]=\"\"; Pkg.add(\"PyCall\"); Pkg.add(\"PyPlot\"); using PyPlot;   If you want to use the latest features, compatible with the  latest documentation , use  Pkg.checkout(\"DynamicalBilliards\") .  After the first installation, it is advised to run the short tests to be sure that everything works as expected. This will only take about 2 minutes:  using   DynamicalBilliards  test_options ( print_info   =   true )  Pkg . test ( DynamicalBilliards )   If you do not want to see what tests are done, do not use any keywords. If you use this package for scientific research, you should run the long tests at least once. To do this, pass the keyword argument  long_tests = true  to the  test_options  function. These tests take on average 20 minutes to complete.", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "For a crash course on how to use  DynamicalBilliards.jl , you should visit the  Basic Usage  section.  If however, you want to make the most out it, the following tutorials offer detailed descriptions:   How to define your custom Billiard Table  Using Ray-Splitting billiards  Visualizing the billiard table and animating the particle's evolution  Creating your own Obstacle Type  Examples page   The  Library  section has the docstrings of all exported names in convenient groups.", 
            "title": "Usage"
        }, 
        {
            "location": "/#julia-billiard-animation", 
            "text": "The animation of a particle inside a \"Julia\" billiard was generated with the code:  using   DynamicalBilliards  bt   =   billiard_julia ( plotit   =   true )  p   =   randominside ( bt )  darkblue   =   ( 64 / 255 ,   99 / 255 ,   216 / 255 )  lightblue   =   ( 102 / 255 ,   130 / 255 ,   223 / 255 )  okwargs   =   Dict ( : linewidth   =   2.0 ,   : color   =   lightblue )  pkwargs   =   Dict ( : color   =   darkblue ,   : s   =   150.0 )  sname   =   C: \\\\ **** \\\\ anim  animate_evolution ( p ,   bt ,   200 ;   col_to_plot   =   7 ,  particle_kwargs   =   pkwargs ,   orbit_kwargs   =   okwargs ,  savefigs   =   true ,   savename   =   sname )  # use gifmaker.me to merge all figures into one .gif  # in a future upadte, automatic support will be added", 
            "title": "Julia Billiard Animation"
        }, 
        {
            "location": "/basic/basic_usage/", 
            "text": "Basic Usage\n\n\nDynamicalBilliards.jl\n was created with easy-of-use as its main cornerstone. With 3 simple steps, the user can fully initalize, evolve, and get the output of the propagation of a particle in a billiard system.\n\n\nIn general, the workflow of \nDynamicalBilliards.jl\n follows these simple steps:\n\n\n\n\nCreate a billiard table, a \nVector{Obstacle}\n.\n\n\nCreate a particle inside that billiard table.\n\n\nGet the output by evolving the particle.\n\n\n\n\nAdding more complexity in your billiard table does not add complexity in your code. For example, to implement a ray-splitting billiard you only need to define one additional variable, a dictionary \nDict{Int, Vector{Function}}\n. After reading through this basic usage page, you will be able to use all aspects of \nDynamicalBilliards.jl\n with minimal effort.\n\n\n\n\nStraight Propagation\n\n\n\n\nThe usage of this package revolves around a single function:\n\n\nevolve!\n(\np\n::\nAbstractParticle\n,\n \nbt\n::\nVector\n{\nObstacle\n},\n \ntotal_time\n)\n\n\n\n\n\n\nwhich evolves a particle \np\n inside a billiard table \nbt\n for a given amount of time \ntotal_time\n, while taking care of all the details internally.\n\n\nThe first step is to define the billiard table \nbt\n, which is the system the particle \np\n will propagate in. A billiard table is simply a collection (\nVector\n) of \nObstacle\ns. The most convenient way is to use one of the pre-defined billiard tables offered by the package. For example, let's create a periodic Sinai billiard with disk radius of 0.3 and with one side of length 2 and one of length 1:\n\n\nusing\n \nDynamicalBilliards\n\n\nbt\n \n=\n \nbilliard_sinai\n(\n0.3\n,\n \n2.0\n,\n \n1.0\n;\n \nsetting\n \n=\n \nperiodic\n)\n\n\n\n\n\n\n(for more information about defining billiard tables visit the \ntutorial on defining your own billiard table\n)\n\n\nAfterwards, you want to create a particle inside that billiard system. For that, the function \nrandominside(bt::Vector{Obstacle})\n is provided, which returns a particle with random initial conditions inside the billiard table.\n\n\np\n \n=\n \nrandominside\n(\nbt\n)\n\n\n\n\n\n\nIf you want to specify the initial conditions yourself, simply pass them to the \nParticle\n constructor, like \np = Particle(x0, y0, \u03c60)\n. Now you are ready to evolve this particle:\n\n\nct\n,\n \nposs\n,\n \nvels\n \n=\n \nevolve!\n(\np\n,\n \nbt\n,\n \n1000.0\n)\n\n\n\n\n\n\nThe return values of the \nevolve!()\n function need some brief explaining: As noted by the \"!\" at the end of the function, it changes its argument \np\n. Most importantly however, this function also returns the main output expected by a billiard system. This output is a tuple of three vectors:\n\n\n\n\nct::Vector{Float64}\n : Collision times.\n\n\nposs::Vector{SVector{2}}\n : Positions during collisions.\n\n\nvels:: Vector{SVector{2}})\n : Velocities \nexactly after\n the collisions (e.g. after reflection).\n\n\n\n\nThe time \nt[i]\n is the time necessary to reach state \nposs[i], vels[i]\n starting from the state \nposs[i-1], vels[i-1]\n. That is why \nt[1]\n is always 0 since \nposs[1], vels[1]\n are the initial conditions.\n\n\nIf this output is not convenient for you, the function \nconstruct(ct, poss, vels)\n is provided, which constructs the (continuous) timeseries of the position and velocity, as well as the time-vector, when given the main output of \nevolve!()\n:\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nts\n \n=\n \nconstruct\n(\nct\n,\n \nposs\n,\n \nvels\n)\n\n\n\n\n\n\nor, by taking advantage of the awesome ellipsis operator, you can do:\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nts\n \n=\n \nconstruct\n(\nevolve!\n(\np\n,\n \nbt\n,\n \n1000.0\n)\n...\n)\n\n\n\n\n\n\n\n\nMagnetic Propagation\n\n\n\n\nThe are only two differences between magnetic and straight propagation. Firstly, the particle type is not \nParticle\n anymore, but \nMagneticParticle\n. The latter has an extra field called \nomega\n which is the cyclic frequency of rotation (equivalently, the angular velocity). In order to create a \nMagneticParticle\n (without using the constructors), you simply provide this extra information to the \nrandominside()\n function:\n\n\n\u03c9\n \n=\n \n0.5\n\n\np\n \n=\n \nrandominside\n(\nbt\n,\n \n\u03c9\n)\n\n\ntypeof\n(\np\n)\n \n# MagneticParticle\n\n\np\n.\nomega\n   \n# 0.5\n\n\n\n\n\n\nTo propagate the particle you use the same functions:\n\n\nct\n,\n \nposs\n,\n \nvels\n,\n \n\u03c9\n \n=\n \nevolve!\n(\np\n,\n \nbt\n,\n \n1000.0\n)\n  \n#evolve for magnetic also returns \u03c9\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nts\n \n=\n \nconstruct\n(\nct\n,\n \nposs\n,\n \nvels\n,\n \n\u03c9\n,\n \ndt\n)\n\n\n# or equivalently:\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nts\n \n=\n \nconstruct\n(\nevolve!\n(\np\n,\n \nbt\n,\n \n1000.0\n)\n...\n,\n \ndt\n)\n\n\n\n\n\n\nAs you can see, the second difference is that the additional argument of the angular velocity must also be provided to the \nconstruct()\n function, in order for it to construct circular motion instead of straight motion between collisions. (Note: \nevolve!()\n returns 4 arguments for magnetic propagation, making the ellipsis syntax extremely useful!).\n\n\nThe final optional argument \ndt\n is the time-step at which the timeseries are constructed (since they are made up of sines and cosines).\n\n\n\n\nRay-Splitting\n\n\n\n\nNo matter how complex ray-splitting processes you want, and irrespectively of how many obstacles in the billiard table can perform ray-splitting, there is only a single difference on the main function call: The \nevolve!()\n function is supplemented with a fourth argument, called \"ray_splitter\":\n\n\nray_splitter\n::\nDict\n{\nInt\n,\n \nVector\n{\nFunction\n}}\n\n\n\n\n\n\nThis argument is simply a dictionary which handles all ray-splitting processes in the billiard system. It is a map of the Obstacle index within the billiard table to the ray-splitting functions: (\u03c6 is the angle of incidence)\n\n\n\n\nT(\u03c6, where, \u03c9) : Transmission probability.\n\n\n\u03b8(\u03c6, where, \u03c9) : Transmission (aka diffraction) angle.\n\n\nnew_\u03c9(\u03c9, where) : Angular velocity after transmission.\n\n\n\n\nAssuming you have defined a billiard table and a ray-splitter dictionary, the implementation is exactly the same as in the two previous cases: the ray-splitting dictionary is passed to \nevolve!()\n as a fourth argument.\n\n\nray_splitter\n \n=\n \nDict\n(\n5\n \n=\n \n[\nfoo\n,\n \nbar\n,\n \nbaz\n])\n\n\np\n \n=\n \nrandominside\n(\nbt\n,\n \n4.0\n)\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nts\n \n=\n \nconstruct\n(\nevolve!\n(\np\n,\n \nbt\n,\n \n100.0\n,\n \nray_splitter\n)\n...\n,\n \n0.01\n)\n\n\n\n\n\n\nFor more information and instructions on defining the \"ray_splitter\" dictionary visit the \nRay-Splitting tutorial here\n.\n\n\n\n\nVisualizing\n\n\n\n\nThe functions \nplot_obstacle(obst::Obstacle; kwargs...)\n, \nplot_billiard(bt::Vector{Obstacle})\n and \nplot_particle(p::AbstractParticle; kwargs...)\n are provided in order to plot the respective elements \non the current PyPlot figure\n. The \nkwargs...\n are keywords passed directly into \nPyPlot\n's constructors (like e.g. \nlinewidth = 2.0\n).\n\n\nThe tutorial on visualizing\n has step-by-step descriptions on how to handle all plotting offered by \nDynamicalBilliards.jl\n.\n\n\n\n\nIntroduction animation\n\n\nThe example .gif shown in the introduction, was generated simply with the code:\n\n\nusing\n \nDynamicalBilliards\n,\n \nPyPlot\n\n\n\nbt\n \n=\n \nbilliard_rectangle\n(\n1.5\n,\n \n1.0\n)\n\n\nd1\n \n=\n \nDisk\n([\n0.45\n,\n \n0.6\n],\n \n0.3\n,\n \nUpper-left Disk\n)\n\n\nd2\n \n=\n \nDisk\n([\n1.1\n,\n \n0.3\n],\n \n0.15\n,\n \nLower-right Disk\n)\n\n\nd3\n \n=\n \nDisk\n([\n1.2\n,\n \n0.8\n],\n \n0.1\n,\n \nSmall Disk\n)\n\n\nw1\n \n=\n \nFiniteWall\n([\n0.0\n,\n \n0.4\n],\n \n[\n0.6\n,\n0.0\n],\n \n[\n0.4\n,\n0.6\n],\n \nDiagonal\n)\n\n\npush!\n(\nbt\n,\n \nd1\n,\n \nd2\n,\n \nd3\n,\n \nw1\n)\n\n\n\u03c9\n \n=\n \n2.0\n\n\np\n \n=\n \nrandominside\n(\nbt\n,\n \n\u03c9\n)\n\n\n\nplot_billiard\n(\nbt\n)\n\n\naxis\n(\noff\n)\n\n\ntight_layout\n()\n\n\n\nsname\n \n=\n \nC:\n\\\\\n***\n\\\\\nexample\n\n\nplot_evolution\n(\np\n,\n \nbt\n,\n \n200\n;\n\n\ncol_to_plot\n \n=\n \n4\n,\n \nsavefigs\n \n=\n \ntrue\n,\n \nsavename\n \n=\n \nsname\n)\n\n\n\n\n\n\nAfterwards the outputed .png files where merged into a single .gif externally using for example the website gifmaker.me.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/basic/basic_usage/#basic-usage", 
            "text": "DynamicalBilliards.jl  was created with easy-of-use as its main cornerstone. With 3 simple steps, the user can fully initalize, evolve, and get the output of the propagation of a particle in a billiard system.  In general, the workflow of  DynamicalBilliards.jl  follows these simple steps:   Create a billiard table, a  Vector{Obstacle} .  Create a particle inside that billiard table.  Get the output by evolving the particle.   Adding more complexity in your billiard table does not add complexity in your code. For example, to implement a ray-splitting billiard you only need to define one additional variable, a dictionary  Dict{Int, Vector{Function}} . After reading through this basic usage page, you will be able to use all aspects of  DynamicalBilliards.jl  with minimal effort.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/basic/basic_usage/#straight-propagation", 
            "text": "The usage of this package revolves around a single function:  evolve! ( p :: AbstractParticle ,   bt :: Vector { Obstacle },   total_time )   which evolves a particle  p  inside a billiard table  bt  for a given amount of time  total_time , while taking care of all the details internally.  The first step is to define the billiard table  bt , which is the system the particle  p  will propagate in. A billiard table is simply a collection ( Vector ) of  Obstacle s. The most convenient way is to use one of the pre-defined billiard tables offered by the package. For example, let's create a periodic Sinai billiard with disk radius of 0.3 and with one side of length 2 and one of length 1:  using   DynamicalBilliards  bt   =   billiard_sinai ( 0.3 ,   2.0 ,   1.0 ;   setting   =   periodic )   (for more information about defining billiard tables visit the  tutorial on defining your own billiard table )  Afterwards, you want to create a particle inside that billiard system. For that, the function  randominside(bt::Vector{Obstacle})  is provided, which returns a particle with random initial conditions inside the billiard table.  p   =   randominside ( bt )   If you want to specify the initial conditions yourself, simply pass them to the  Particle  constructor, like  p = Particle(x0, y0, \u03c60) . Now you are ready to evolve this particle:  ct ,   poss ,   vels   =   evolve! ( p ,   bt ,   1000.0 )   The return values of the  evolve!()  function need some brief explaining: As noted by the \"!\" at the end of the function, it changes its argument  p . Most importantly however, this function also returns the main output expected by a billiard system. This output is a tuple of three vectors:   ct::Vector{Float64}  : Collision times.  poss::Vector{SVector{2}}  : Positions during collisions.  vels:: Vector{SVector{2}})  : Velocities  exactly after  the collisions (e.g. after reflection).   The time  t[i]  is the time necessary to reach state  poss[i], vels[i]  starting from the state  poss[i-1], vels[i-1] . That is why  t[1]  is always 0 since  poss[1], vels[1]  are the initial conditions.  If this output is not convenient for you, the function  construct(ct, poss, vels)  is provided, which constructs the (continuous) timeseries of the position and velocity, as well as the time-vector, when given the main output of  evolve!() :  xt ,   yt ,   vxt ,   vyt ,   ts   =   construct ( ct ,   poss ,   vels )   or, by taking advantage of the awesome ellipsis operator, you can do:  xt ,   yt ,   vxt ,   vyt ,   ts   =   construct ( evolve! ( p ,   bt ,   1000.0 ) ... )", 
            "title": "Straight Propagation"
        }, 
        {
            "location": "/basic/basic_usage/#magnetic-propagation", 
            "text": "The are only two differences between magnetic and straight propagation. Firstly, the particle type is not  Particle  anymore, but  MagneticParticle . The latter has an extra field called  omega  which is the cyclic frequency of rotation (equivalently, the angular velocity). In order to create a  MagneticParticle  (without using the constructors), you simply provide this extra information to the  randominside()  function:  \u03c9   =   0.5  p   =   randominside ( bt ,   \u03c9 )  typeof ( p )   # MagneticParticle  p . omega     # 0.5   To propagate the particle you use the same functions:  ct ,   poss ,   vels ,   \u03c9   =   evolve! ( p ,   bt ,   1000.0 )    #evolve for magnetic also returns \u03c9  xt ,   yt ,   vxt ,   vyt ,   ts   =   construct ( ct ,   poss ,   vels ,   \u03c9 ,   dt )  # or equivalently:  xt ,   yt ,   vxt ,   vyt ,   ts   =   construct ( evolve! ( p ,   bt ,   1000.0 ) ... ,   dt )   As you can see, the second difference is that the additional argument of the angular velocity must also be provided to the  construct()  function, in order for it to construct circular motion instead of straight motion between collisions. (Note:  evolve!()  returns 4 arguments for magnetic propagation, making the ellipsis syntax extremely useful!).  The final optional argument  dt  is the time-step at which the timeseries are constructed (since they are made up of sines and cosines).", 
            "title": "Magnetic Propagation"
        }, 
        {
            "location": "/basic/basic_usage/#ray-splitting", 
            "text": "No matter how complex ray-splitting processes you want, and irrespectively of how many obstacles in the billiard table can perform ray-splitting, there is only a single difference on the main function call: The  evolve!()  function is supplemented with a fourth argument, called \"ray_splitter\":  ray_splitter :: Dict { Int ,   Vector { Function }}   This argument is simply a dictionary which handles all ray-splitting processes in the billiard system. It is a map of the Obstacle index within the billiard table to the ray-splitting functions: (\u03c6 is the angle of incidence)   T(\u03c6, where, \u03c9) : Transmission probability.  \u03b8(\u03c6, where, \u03c9) : Transmission (aka diffraction) angle.  new_\u03c9(\u03c9, where) : Angular velocity after transmission.   Assuming you have defined a billiard table and a ray-splitter dictionary, the implementation is exactly the same as in the two previous cases: the ray-splitting dictionary is passed to  evolve!()  as a fourth argument.  ray_splitter   =   Dict ( 5   =   [ foo ,   bar ,   baz ])  p   =   randominside ( bt ,   4.0 )  xt ,   yt ,   vxt ,   vyt ,   ts   =   construct ( evolve! ( p ,   bt ,   100.0 ,   ray_splitter ) ... ,   0.01 )   For more information and instructions on defining the \"ray_splitter\" dictionary visit the  Ray-Splitting tutorial here .", 
            "title": "Ray-Splitting"
        }, 
        {
            "location": "/basic/basic_usage/#visualizing", 
            "text": "The functions  plot_obstacle(obst::Obstacle; kwargs...) ,  plot_billiard(bt::Vector{Obstacle})  and  plot_particle(p::AbstractParticle; kwargs...)  are provided in order to plot the respective elements  on the current PyPlot figure . The  kwargs...  are keywords passed directly into  PyPlot 's constructors (like e.g.  linewidth = 2.0 ).  The tutorial on visualizing  has step-by-step descriptions on how to handle all plotting offered by  DynamicalBilliards.jl .", 
            "title": "Visualizing"
        }, 
        {
            "location": "/basic/basic_usage/#introduction-animation", 
            "text": "The example .gif shown in the introduction, was generated simply with the code:  using   DynamicalBilliards ,   PyPlot  bt   =   billiard_rectangle ( 1.5 ,   1.0 )  d1   =   Disk ([ 0.45 ,   0.6 ],   0.3 ,   Upper-left Disk )  d2   =   Disk ([ 1.1 ,   0.3 ],   0.15 ,   Lower-right Disk )  d3   =   Disk ([ 1.2 ,   0.8 ],   0.1 ,   Small Disk )  w1   =   FiniteWall ([ 0.0 ,   0.4 ],   [ 0.6 , 0.0 ],   [ 0.4 , 0.6 ],   Diagonal )  push! ( bt ,   d1 ,   d2 ,   d3 ,   w1 )  \u03c9   =   2.0  p   =   randominside ( bt ,   \u03c9 )  plot_billiard ( bt )  axis ( off )  tight_layout ()  sname   =   C: \\\\ *** \\\\ example  plot_evolution ( p ,   bt ,   200 ;  col_to_plot   =   4 ,   savefigs   =   true ,   savename   =   sname )   Afterwards the outputed .png files where merged into a single .gif externally using for example the website gifmaker.me.", 
            "title": "Introduction animation"
        }, 
        {
            "location": "/tutorials/billiard_table/", 
            "text": "A billiard table \nbt\n is a vector of Obstacles: \nbt::Vector{Obstacle}\n.  The abstract Type \nObstacle\n is the supertype of all objects that a particle may collide with.\n\n\nThere are many premade functions that construct well-known billiards, like the periodic Sinai billiard. You can find all of them at the \nStandard Billiards page\n.\n\n\nTo create a custom billiard, you start with an empty Vector:\n\n\nbt = Obstacle[]\n\n\n\n\n\nand then you create your obstacles one by one and add them to it. All obstacles that are already defined in the package can be found at the \nObstacles page\n of the library. The function \nbilliard_polygon\n creates a polygonal billiard table.  However, for the example of this page, we will create a hexagonal billiard with a disk in the middle step-by-step.\n\n\nThe first step is to define the six walls of the billiard table. A \nFiniteWall\n object needs to be supplemented with a start point, an end point, a normal vector and, optionally, a name. The vertex points of a regular hexagon of radius \nr\n are given by the formula:\n\n\n$$\n(x,y) = \\left( r\\cos\\left(\\frac{2\\pi i}{6}\\right), r\\cos\\left(\\frac{2\\pi i}{6}\\right) \\right)\\,, \\quad \\text{for i $\\in$ {1,...,6}}\n$$\n\n\nTo create each wall object, we will implement the following loop, choosing a size of 2.0:\n\n\nusing\n \nDynamicalBilliards\n\n\nhexagon_vertex\n \n=\n \n(\nr\n)\n \n-\n \n[\n \n[\nr\n*\ncos\n(\n2\n\u03c0\n*\ni\n/\n6\n),\n \nr\n*\nsin\n(\n2\n\u03c0\n*\ni\n/\n6\n)]\n \nfor\n \ni\n \nin\n \n1\n:\n6\n]\n\n\nhexver\n \n=\n \nhexagon_vertex\n(\n2.0\n)\n\n\n\nfor\n \ni\n \nin\n \neachindex\n(\nhexver\n)\n\n  \nstarting\n \n=\n \nhexver\n[\ni\n]\n\n  \nending\n \n=\n \nhexver\n[\nmod1\n(\ni\n+\n1\n,\n \nlength\n(\nhexver\n))]\n\n  \nw\n \n=\n \nending\n \n-\n \nstarting\n\n  \nnormal\n \n=\n \n[\n-\nw\n[\n2\n],\n \nw\n[\n1\n]]\n\n  \nwall\n \n=\n \nFiniteWall\n(\nstarting\n,\n \nending\n,\n \nnormal\n,\n \nwall \n$i\n)\n\n  \npush!\n(\nbt\n,\n \nwall\n)\n\n\nend\n\n\n\n\n\n\nThe \nnormal\n vector of a \nWall\n obstacle is necessary to be supplemented by the user because it must point towards where the particle is expected to come from. If \nw\n is the vector (wall) pointing from start- to end-point then the vector \n[-w[2], w[1]]\n is pointing to the left of \nw\n and the vector \n[w[2], -[w1]]\n is pointing to the right. Both are normal to \nw\n, but you have to know which one to pick. In this case this is very easy, since the normal has to simply point towards the origin.\n\n\nWe add a disk by specifying a center and radius (and optionally a name): \n\n\nd\n \n=\n \nDisk\n([\n0\n,\n0\n],\n \n0.8\n)\n\n\npush!\n(\nbt\n,\n \nd\n)\n\n\n\n\n\n\nTo make sure the billiard looks as you would expect, use the function \nplot_billiard(bt)\n. Create a particle inside that billiard and evolve it:\n\n\nplot_billiard\n(\nbt\n)\n\n\n\u03c9\n \n=\n \n0.5\n\n\np\n \n=\n \nrandominside\n(\np\n,\n \n\u03c9\n)\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nt\n \n=\n \nconstruct\n(\nevolve!\n(\np\n,\n \nbt\n,\n \n100\n)\n...\n)\n\n\n\n\n\n\nThe billiard table now works for straight or magnetic propagation.  To expand this to ray-splitting you have to use ray-splitting Obstacles (\nsee the tutorial on Ray-Splitting\n).  Additional information on how to define your own \nObstacle\n sub-type is given in the tutorial on \nCefining your own Obstacles\n.\n\n\nIf you make any billiard system that you think is common and missing from this package, you are more than welcome to submit a PR extending the \nStandardBilliards.jl\n library with your contribution!", 
            "title": "Defining a Billiard Table"
        }, 
        {
            "location": "/tutorials/ray-splitting/", 
            "text": "Ray-Splitting\n\n\nRay-splitting is a semiclassical approach to the billiard system, giving a wave attribute to the ray traced by the particle. Upon collision a particle may propagate through an obstacle (transmission \n refraction) or be reflected. Following the mindset of this package, implementing a ray-splitting billiard requires only three very simple steps.\n\n\n\n\nRay-Splitting Obstacles\n\n\nFirst, an obstacle that supports ray-splitting is required to be present in your billiard table. The only new feature these obstacles have is an additional Boolean field called \nwhere\n. This field notes on which side of the obstacle the particle is currently propagating \n(if you are wondering how a distance can change sign, see the tutorial on Defining your own Obstacles)\n. The normal vector as well as the distance from boundary change sign depending on the value of \nwhere\n. The obstacles \nAntidot\n and \nSplitterWall\n are the equivalents of disk and wall for ray-splitting. To make your own defined obstacle support ray-splitting, visit this tutorial.\n\n\n\n\nThere is a simple reason for having extra Types to support ray-splitting: non ray-splitting Types  always perform 2 less operations in their innermost loops, saving a bit of time. Also, ray-splitting obstacles are defined as \ntype\n instead of as \nimmutable\n.\n\n\n\n\nLet's add an \nAntidot\n to a billiard table:\n\n\nusing\n \nDynamicalBilliards\n\n\nbt\n \n=\n \nbilliard_rectangle\n()\n\n\na\n \n=\n \nAntidot\n([\n0.5\n,\n0.5\n],\n \n0.3\n)\n\n\npush!\n(\nbt\n,\n \na\n)\n\n\n\n\n\n\n\n\nRay-Splitting Functions\n\n\nSecondly, for each obstacle in your billiard table that will perform ray-splitting, you have to define 3 functions. Notice that not every obstacle that supports ray-splitting actually has to perform it; it is up to the user. Those 3 functions are the following:\n\n\n\n\nT(\u03c6, \nwhere\n, \u03c9) : Takes as input the angle of incidence \u03c6 and returns the transmission probability \u03a4 depending on  whether the particle is inside or outside the obstacle (\nwhere\n) and optionally depending on \u03c9.  This function should be an even function with respect to \u03c6.\n\n\n\u03b8(\u03c6, \nwhere\n, \u03c9) : Takes as input the angle of incidence     \u03c6 and returns the the transmission (aka refraction)  angle \u03b8  depending on whether the particle is inside or outside the obstacle (\nwhere\n) and optionally depending on \u03c9.  This function should be an odd function with respect to \u03c6.\n\n\n\u03c9_new(\u03c9, \nwhere\n) : Angular velocity after transmission.\n\n\n\n\nThe above three functions use the \nsame convention\n: the argument \nwhere\n is the one the Obstacle has \nbefore transmission\n. For example, if a particle is outside a disk (let \nwhere = true\n here) and is transmitted inside the disk (\nwhere\n becomes \nfalse\n here), then all three functions will be given their second argument (the boolean one) as \ntrue\n!\n\n\n\n\nRay-Splitter Dictionary\n\n\nTo pass the information of the aforementioned functions into the main API (\nevolve!()\n) a dictionary is required, which we will call \"raysplitter\": \nraysplitter::Dict{Int, Vector{Function}}\n. The keys are integers and the values are vectors of functions.  This dictionary is a map of the obstacle index within the billiard table to the ray-splitting functions. For example, if we wanted to allocate ray-splitting functions for the 5th obstacle in our billiard table, which could be e.g. an \nAntidot\n, we would write something like:\n\n\nsa\n \n=\n \n(\n\u03b8\n,\n \nwhere\n,\n \n\u03c9\n)\n \n-\n \nwhere\n \n?\n \n2\n\u03b8\n \n:\n \n0.5\n\u03b8\n\n\nT\n \n=\n \n(\n\u03b8\n,\n \nwhere\n,\n \n\u03c9\n)\n \n-\n \nbegin\n\n  \nif\n \nwhere\n\n    \nabs\n(\n\u03b8\n)\n \n \n\u03c0\n/\n4\n \n?\n \n0.5\nexp\n(\n-\n(\n\u03b8\n)\n^\n2\n/\n2\n(\n\u03c0\n/\n8\n)\n^\n2\n)\n \n:\n \n0.0\n\n  \nelse\n\n    \n0.75\n*\nexp\n(\n-\n(\n\u03b8\n)\n^\n2\n/\n2\n(\n\u03c0\n/\n4\n)\n^\n2\n)\n\n  \nend\n\n\nend\n\n\nnewo\n \n=\n \n(\n\u03c9\n,\n \nbool\n)\n \n-\n \nbool\n \n?\n \n-\n0.5\n\u03c9\n \n:\n \n-\n2\n\u03c9\n\n\nraysplitter\n \n=\n \nDict\n(\n5\n \n=\n \n[\nT\n,\n \nsa\n,\n \nnewo\n])\n\n\n\n\n\n\nNotice the following two very important points: The functions \nmust accept the specific number of arguments shown in the previous section\n even if some are not used. Also, the functions must be given \nin the specific order: 1. transmission probability, 2. refraction angle, 3. new \u03c9\n in the vector passed to the dictionary.\n\n\nThe next step is very simple: the \nraysplitter\n dictionary is directly passed into \nevolve!()\n as a fourth argument.  Using the billiard table we defined previously, where its 5th element is a ray-splitting \nAntidot\n, we now do:\n\n\n\u03c9\n \n=\n \n4.0\n\n\np\n \n=\n \nrandominside\n(\nbt\n,\n \n\u03c9\n)\n\n\nxt\n,\n \nyt\n,\n \nvxt\n,\n \nvyt\n,\n \nts\n \n=\n \nconstruct\n(\nevolve!\n(\np\n,\n \nbt\n,\n \n100.0\n,\n \nraysplitter\n)\n...\n,\n \ndt\n \n=\n \n0.05\n)\n\n\nplot_billiard\n(\nbt\n)\n\n\nplot\n(\nxt\n,\n \nyt\n)\n\n\n\n\n\n\nand everything works like a charm! A final difference to be noted is that in the case of ray-splitting with magnetic fields, the fourth value returned by \nevolve!()\n is not a number, but a vector of angular velocities \nomegas\n. The value \nomegas[i]\n is the angular velocity the particle has while propagating from state \npos[i], vel[i]\n to state \npos[i+1], vel[i+1]\n. The \nconstruct()\n function takes this into account.\n\n\n\n\nNo field \"where\" error\n\n\nIf you ever encounter the error \nERROR: type SomeObstacleType has no field where\n this means that the index provided by your ray-splitting dictionary points to an object that does not support ray-splitting. Use the functions:\n\n\nacceptable_raysplitter\n(\nraysplitter\n,\n \nbt\n)\n\n\nsupports_raysplitting\n(\nobst\n::\nObstacle\n)\n\n\n\n\n\n\nto find out what you did wrong. Most likely, the index you supported was incorrect, i.e. the index could be \n5\n instead of \n4\n.\n\n\n\n\nPhysics\n\n\nThe condition for transmission is simply: \nT(\u03c6, where, \u03c9) \n rand()\n. If it returns \ntrue\n, transmission (i.e. ray-splitting) will happen. Otherwise just specular reflection will take place.\n\n\nThe three key functions given to the \nraysplitter\n dictionary must have some properties in order to have physical meaning, like for example that the scattering probability function is even towards \u03c6. One of these properties is absolutely \nmandatory\n for this package to work properly. This is the property of total internal reflection, i.e. if the refraction angle is calculated to be greater/equal than \u03c0/2, no transmission can happen. \nThis condition is not assured internally\n and thefore you must be sure that your transmission probability function satisfies it. In the above example, the function \nT\n makes sure to return 0 in that case.\n\n\nIn order to test if the \nraysplitter\n dictionary you have defined has physical meaning, the function \nisphysical()\n is provided. Its \ndocumentation string\n has all the details one should know:\n\n\n\n\nVelocity measure\n\n\nThe \nMagneticParticle\n is assumed to always have a velocity vector of measure 1. This simplyfies the formulas used internally to a significant amount. During ray-splitting, the particle may be in areas with different fields, resulting in different angular velocities (result of the \"\u03c9_new\" function).\n\n\nPhysically, in such a situation, the velocity measure of the particle will also change. This is not implemented internally by \nDynamicalBilliards\n  during the evolution of the particle. However it is very easy to change this after the particle has evolved.", 
            "title": "Ray-Splitting"
        }, 
        {
            "location": "/tutorials/ray-splitting/#ray-splitting", 
            "text": "Ray-splitting is a semiclassical approach to the billiard system, giving a wave attribute to the ray traced by the particle. Upon collision a particle may propagate through an obstacle (transmission   refraction) or be reflected. Following the mindset of this package, implementing a ray-splitting billiard requires only three very simple steps.", 
            "title": "Ray-Splitting"
        }, 
        {
            "location": "/tutorials/ray-splitting/#ray-splitting-obstacles", 
            "text": "First, an obstacle that supports ray-splitting is required to be present in your billiard table. The only new feature these obstacles have is an additional Boolean field called  where . This field notes on which side of the obstacle the particle is currently propagating  (if you are wondering how a distance can change sign, see the tutorial on Defining your own Obstacles) . The normal vector as well as the distance from boundary change sign depending on the value of  where . The obstacles  Antidot  and  SplitterWall  are the equivalents of disk and wall for ray-splitting. To make your own defined obstacle support ray-splitting, visit this tutorial.   There is a simple reason for having extra Types to support ray-splitting: non ray-splitting Types  always perform 2 less operations in their innermost loops, saving a bit of time. Also, ray-splitting obstacles are defined as  type  instead of as  immutable .   Let's add an  Antidot  to a billiard table:  using   DynamicalBilliards  bt   =   billiard_rectangle ()  a   =   Antidot ([ 0.5 , 0.5 ],   0.3 )  push! ( bt ,   a )", 
            "title": "Ray-Splitting Obstacles"
        }, 
        {
            "location": "/tutorials/ray-splitting/#ray-splitting-functions", 
            "text": "Secondly, for each obstacle in your billiard table that will perform ray-splitting, you have to define 3 functions. Notice that not every obstacle that supports ray-splitting actually has to perform it; it is up to the user. Those 3 functions are the following:   T(\u03c6,  where , \u03c9) : Takes as input the angle of incidence \u03c6 and returns the transmission probability \u03a4 depending on  whether the particle is inside or outside the obstacle ( where ) and optionally depending on \u03c9.  This function should be an even function with respect to \u03c6.  \u03b8(\u03c6,  where , \u03c9) : Takes as input the angle of incidence     \u03c6 and returns the the transmission (aka refraction)  angle \u03b8  depending on whether the particle is inside or outside the obstacle ( where ) and optionally depending on \u03c9.  This function should be an odd function with respect to \u03c6.  \u03c9_new(\u03c9,  where ) : Angular velocity after transmission.   The above three functions use the  same convention : the argument  where  is the one the Obstacle has  before transmission . For example, if a particle is outside a disk (let  where = true  here) and is transmitted inside the disk ( where  becomes  false  here), then all three functions will be given their second argument (the boolean one) as  true !", 
            "title": "Ray-Splitting Functions"
        }, 
        {
            "location": "/tutorials/ray-splitting/#ray-splitter-dictionary", 
            "text": "To pass the information of the aforementioned functions into the main API ( evolve!() ) a dictionary is required, which we will call \"raysplitter\":  raysplitter::Dict{Int, Vector{Function}} . The keys are integers and the values are vectors of functions.  This dictionary is a map of the obstacle index within the billiard table to the ray-splitting functions. For example, if we wanted to allocate ray-splitting functions for the 5th obstacle in our billiard table, which could be e.g. an  Antidot , we would write something like:  sa   =   ( \u03b8 ,   where ,   \u03c9 )   -   where   ?   2 \u03b8   :   0.5 \u03b8  T   =   ( \u03b8 ,   where ,   \u03c9 )   -   begin \n   if   where \n     abs ( \u03b8 )     \u03c0 / 4   ?   0.5 exp ( - ( \u03b8 ) ^ 2 / 2 ( \u03c0 / 8 ) ^ 2 )   :   0.0 \n   else \n     0.75 * exp ( - ( \u03b8 ) ^ 2 / 2 ( \u03c0 / 4 ) ^ 2 ) \n   end  end  newo   =   ( \u03c9 ,   bool )   -   bool   ?   - 0.5 \u03c9   :   - 2 \u03c9  raysplitter   =   Dict ( 5   =   [ T ,   sa ,   newo ])   Notice the following two very important points: The functions  must accept the specific number of arguments shown in the previous section  even if some are not used. Also, the functions must be given  in the specific order: 1. transmission probability, 2. refraction angle, 3. new \u03c9  in the vector passed to the dictionary.  The next step is very simple: the  raysplitter  dictionary is directly passed into  evolve!()  as a fourth argument.  Using the billiard table we defined previously, where its 5th element is a ray-splitting  Antidot , we now do:  \u03c9   =   4.0  p   =   randominside ( bt ,   \u03c9 )  xt ,   yt ,   vxt ,   vyt ,   ts   =   construct ( evolve! ( p ,   bt ,   100.0 ,   raysplitter ) ... ,   dt   =   0.05 )  plot_billiard ( bt )  plot ( xt ,   yt )   and everything works like a charm! A final difference to be noted is that in the case of ray-splitting with magnetic fields, the fourth value returned by  evolve!()  is not a number, but a vector of angular velocities  omegas . The value  omegas[i]  is the angular velocity the particle has while propagating from state  pos[i], vel[i]  to state  pos[i+1], vel[i+1] . The  construct()  function takes this into account.", 
            "title": "Ray-Splitter Dictionary"
        }, 
        {
            "location": "/tutorials/ray-splitting/#no-field-where-error", 
            "text": "If you ever encounter the error  ERROR: type SomeObstacleType has no field where  this means that the index provided by your ray-splitting dictionary points to an object that does not support ray-splitting. Use the functions:  acceptable_raysplitter ( raysplitter ,   bt )  supports_raysplitting ( obst :: Obstacle )   to find out what you did wrong. Most likely, the index you supported was incorrect, i.e. the index could be  5  instead of  4 .", 
            "title": "No field \"where\" error"
        }, 
        {
            "location": "/tutorials/ray-splitting/#physics", 
            "text": "The condition for transmission is simply:  T(\u03c6, where, \u03c9)   rand() . If it returns  true , transmission (i.e. ray-splitting) will happen. Otherwise just specular reflection will take place.  The three key functions given to the  raysplitter  dictionary must have some properties in order to have physical meaning, like for example that the scattering probability function is even towards \u03c6. One of these properties is absolutely  mandatory  for this package to work properly. This is the property of total internal reflection, i.e. if the refraction angle is calculated to be greater/equal than \u03c0/2, no transmission can happen.  This condition is not assured internally  and thefore you must be sure that your transmission probability function satisfies it. In the above example, the function  T  makes sure to return 0 in that case.  In order to test if the  raysplitter  dictionary you have defined has physical meaning, the function  isphysical()  is provided. Its  documentation string  has all the details one should know:", 
            "title": "Physics"
        }, 
        {
            "location": "/tutorials/ray-splitting/#velocity-measure", 
            "text": "The  MagneticParticle  is assumed to always have a velocity vector of measure 1. This simplyfies the formulas used internally to a significant amount. During ray-splitting, the particle may be in areas with different fields, resulting in different angular velocities (result of the \"\u03c9_new\" function).  Physically, in such a situation, the velocity measure of the particle will also change. This is not implemented internally by  DynamicalBilliards   during the evolution of the particle. However it is very easy to change this after the particle has evolved.", 
            "title": "Velocity measure"
        }, 
        {
            "location": "/tutorials/visualizing/", 
            "text": "All plotting functionality of \nDynamicalBilliards\n lies within a few well-defined functions that use the \nPyPlot\n package to plot aspects of the system on the current PyPlot figure. These functions are nicely grouped in this \nlibrary section\n.\n\n\n\n\nPlotting the Billiard Table\n\n\nThe function \nplot_obstacle(obst::Obstacle; kwargs...)\n plots the obstacle on the current PyPlot figure. The \nkwargs...\n are keywords passed directly into \nPyPlot\n's constructors (like e.g. \nlinewidth = 2.0\n). For example:\n\n\nusing\n \nDynamicalBilliards\n,\n \nPyPlot\n\n\nbt\n \n=\n \nbilliard_sinai\n(\n0.3\n)\n\n\n# Plot disk:\n\n\nplot_obstacle\n(\nbt\n[\n5\n])\n\n\n# Plot left wall:\n\n\nplot_obstacle\n(\nbt\n[\n1\n])\n\n\n# Plot right wall with different settings:\n\n\nplot_obstacle\n(\nbt\n[\n2\n];\n \nlinewidth\n \n=\n \n3.0\n,\n \nlinestyle\n \n=\n \ndashed\n,\n \ncolor\n \n=\n \n(\n1.0\n,\n \n0.5\n,\n \n0.5\n))\n\n\n# Set limits for the purpose of the tutorial\n\n\nxlim\n(\n-\n0.1\n,\n \n1.1\n);\n \nylim\n(\n-\n0.1\n,\n \n1.1\n)\n\n\n\n\n\n\nwill plot something like this:\n\n\n\n\nIf you want to quickly plot the entire billiard table without changing the settings, simply use the function  \nplot_billiard(bt)\n:\n\n\nbt\n \n=\n \nbilliard_polygon\n(\n6\n,\n \n1\n)\n\n\na\n \n=\n \nAntidot\n([\n0.0\n,\n0.0\n],\n \n0.5\n)\n\n\npush!\n(\nbt\n,\n \na\n)\n\n\nplot_billiard\n(\nbt\n)\n\n\n\n\n\n\nwhich will plot something like this:\n\n\n\n\nplot_billiard()\n also sets up the axis to have equal aspect ratio and sets up the axis limits to be just large enough to contain the entire billiard.\n\n\n\n\nPlotting particles\n\n\nFollowing the above example, we create and plot a particle using the function \nplot_particle\n:\n\n\np\n \n=\n \nrandominside\n(\nbt\n)\n\n\nplot_particle\n(\np\n)\n\n\n# Plot one more particle with purple color,\n\n\n# pentagon shape and bigger size (default is s=30):\n\n\np2\n \n=\n \nrandominside\n(\nbt\n)\n\n\nplot_particle\n(\np2\n;\n \ncolor\n=\n(\n0.5\n,\n \n0\n,\n \n0.8\n),\n \nmarker\n=\np\n,\n \ns\n=\n60.0\n)\n\n\n\n\n\n\nwhich should give you something like this (notice that the particle position and direction are random):\n\n\n\n\n\n\nColor conventions\n\n\nThe default plotting settings have been chosen for maximum clarity and consistency. The color conventions followed are:\n\n\n\n\nParticles are black.\n\n\nParticle orbits/trajectories are blue.\n\n\nReflecting obstacles (e.g. \nDisk\n or \nFiniteWall\n) are green.\n\n\nRandomly reflecting obstacles (e.g. \nRandomDisk\n or \nRandomWall\n) are yellow.\n\n\nRay-splitting obstacles are red with dashed linestyle.\n\n\n\n\n\n\nAnimating the motion of a particle\n\n\nThe function \nanimate_evolution\n is provided to animate the evolution of a particle from collision to collision, using the default arguments. Its \ndocumentation string\n contains all the information necessary for its usage.\n\n\nAutomatic output into an animated image (e.g. \".gif\" format) is not yet supported. However, \nanimate_evolution\n gives users the possibility to save each produce figure in order to merge as an animation using an external tool.\n\n\nLet's animate a particle inside a simple pentagon with magnetic field:\n\n\nbt\n \n=\n \nbilliard_polygon\n(\n5\n,\n \n1\n)\n\n\na\n \n=\n \nDisk\n([\n0.0\n,\n0.0\n],\n \n0.4\n)\n\n\npush!\n(\nbt\n,\n \na\n)\n\n\nplot_billiard\n(\nbt\n)\n\n\n\np\n \n=\n \nrandominside\n(\nbt\n,\n \n1.0\n)\n \n# second argument is magnetic field strength\n\n\nsavedir\n \n=\n \nC:\n\\\\\nsome_path\n\\\\\nanim1\n\n\nanimate_evolution\n(\np\n,\n \nbt\n,\n \n50\n;\n \nsavefigs\n \n=\n \ntrue\n,\n \nsavename\n \n=\n \nsavedir\n)\n\n\n\n\n\n\nThis code produced 50 \".png\" images which were later mixed (using e.g. \ngifmaker\n into a single \".gif\" animation. The output figures have a dpi=60 and therefore take only a dozen kb of space. The animation produced should look like:", 
            "title": "Visualizing"
        }, 
        {
            "location": "/tutorials/visualizing/#plotting-the-billiard-table", 
            "text": "The function  plot_obstacle(obst::Obstacle; kwargs...)  plots the obstacle on the current PyPlot figure. The  kwargs...  are keywords passed directly into  PyPlot 's constructors (like e.g.  linewidth = 2.0 ). For example:  using   DynamicalBilliards ,   PyPlot  bt   =   billiard_sinai ( 0.3 )  # Plot disk:  plot_obstacle ( bt [ 5 ])  # Plot left wall:  plot_obstacle ( bt [ 1 ])  # Plot right wall with different settings:  plot_obstacle ( bt [ 2 ];   linewidth   =   3.0 ,   linestyle   =   dashed ,   color   =   ( 1.0 ,   0.5 ,   0.5 ))  # Set limits for the purpose of the tutorial  xlim ( - 0.1 ,   1.1 );   ylim ( - 0.1 ,   1.1 )   will plot something like this:   If you want to quickly plot the entire billiard table without changing the settings, simply use the function   plot_billiard(bt) :  bt   =   billiard_polygon ( 6 ,   1 )  a   =   Antidot ([ 0.0 , 0.0 ],   0.5 )  push! ( bt ,   a )  plot_billiard ( bt )   which will plot something like this:   plot_billiard()  also sets up the axis to have equal aspect ratio and sets up the axis limits to be just large enough to contain the entire billiard.", 
            "title": "Plotting the Billiard Table"
        }, 
        {
            "location": "/tutorials/visualizing/#plotting-particles", 
            "text": "Following the above example, we create and plot a particle using the function  plot_particle :  p   =   randominside ( bt )  plot_particle ( p )  # Plot one more particle with purple color,  # pentagon shape and bigger size (default is s=30):  p2   =   randominside ( bt )  plot_particle ( p2 ;   color = ( 0.5 ,   0 ,   0.8 ),   marker = p ,   s = 60.0 )   which should give you something like this (notice that the particle position and direction are random):", 
            "title": "Plotting particles"
        }, 
        {
            "location": "/tutorials/visualizing/#color-conventions", 
            "text": "The default plotting settings have been chosen for maximum clarity and consistency. The color conventions followed are:   Particles are black.  Particle orbits/trajectories are blue.  Reflecting obstacles (e.g.  Disk  or  FiniteWall ) are green.  Randomly reflecting obstacles (e.g.  RandomDisk  or  RandomWall ) are yellow.  Ray-splitting obstacles are red with dashed linestyle.", 
            "title": "Color conventions"
        }, 
        {
            "location": "/tutorials/visualizing/#animating-the-motion-of-a-particle", 
            "text": "The function  animate_evolution  is provided to animate the evolution of a particle from collision to collision, using the default arguments. Its  documentation string  contains all the information necessary for its usage.  Automatic output into an animated image (e.g. \".gif\" format) is not yet supported. However,  animate_evolution  gives users the possibility to save each produce figure in order to merge as an animation using an external tool.  Let's animate a particle inside a simple pentagon with magnetic field:  bt   =   billiard_polygon ( 5 ,   1 )  a   =   Disk ([ 0.0 , 0.0 ],   0.4 )  push! ( bt ,   a )  plot_billiard ( bt )  p   =   randominside ( bt ,   1.0 )   # second argument is magnetic field strength  savedir   =   C: \\\\ some_path \\\\ anim1  animate_evolution ( p ,   bt ,   50 ;   savefigs   =   true ,   savename   =   savedir )   This code produced 50 \".png\" images which were later mixed (using e.g.  gifmaker  into a single \".gif\" animation. The output figures have a dpi=60 and therefore take only a dozen kb of space. The animation produced should look like:", 
            "title": "Animating the motion of a particle"
        }, 
        {
            "location": "/tutorials/own_obstacle/", 
            "text": "Creating your own \nObstacle\n Type\n\n\nThis tutorial will be about how to create your own obstacle type.", 
            "title": "Creating your own Obstacle"
        }, 
        {
            "location": "/tutorials/own_obstacle/#creating-your-own-obstacle-type", 
            "text": "This tutorial will be about how to create your own obstacle type.", 
            "title": "Creating your own Obstacle Type"
        }, 
        {
            "location": "/tutorials/examples/", 
            "text": "This section has some examples of usage of \nDynamicalBilliards.jl\n, with some brief comments.\n\n\n\n\nJulia-logo Billiard\n\n\nusing\n \nDynamicalBilliards\n,\n \nPyPlot\n\n\n\nbt\n \n=\n \nObstacle\n[]\n\n\nbt\n \n=\n \nbilliard_rectangle\n()\n\n\nfor\n \nw\n \nin\n \nbt\n\n  \nplot_obstacle\n(\nw\n;\n \ncolor\n \n=\n \n(\n0\n,\n0\n,\n0\n,\n \n1\n),\n \nlinewidth\n \n=\n \n3.0\n)\n\n\nend\n\n\n\nr\n \n=\n \n0.165\n\n\newidth\n \n=\n \n6.0\n\n\nredcent\n \n=\n \n[\n0.28\n,\n \n0.32\n]\n\n\nred\n \n=\n \nDisk\n(\nredcent\n,\n \nr\n,\n \nred\n)\n\n\nplot_obstacle\n(\nred\n;\n \nedgecolor\n \n=\n \n(\n203\n/\n255\n,\n \n60\n/\n255\n,\n \n51\n/\n255\n),\n\n\nfacecolor\n \n=\n \n(\n213\n/\n255\n,\n \n99\n/\n255\n,\n \n92\n/\n255\n),\n \nlinewidth\n \n=\n \newidth\n)\n\n\n\npurple\n \n=\n \nDisk\n([\n1\n \n-\n \nredcent\n[\n1\n],\n \nredcent\n[\n2\n]],\n \nr\n,\n \npurple\n)\n\n\nplot_obstacle\n(\npurple\n;\n \nedgecolor\n \n=\n \n(\n149\n/\n255\n,\n \n88\n/\n255\n,\n \n178\n/\n255\n),\n\n\nfacecolor\n \n=\n \n(\n170\n/\n255\n,\n \n121\n/\n255\n,\n \n193\n/\n255\n),\n \nlinewidth\n \n=\n \newidth\n)\n\n\n\ngreen\n \n=\n \nDisk\n([\n0.5\n,\n \n1\n \n-\n \nredcent\n[\n2\n]],\n \nr\n,\n \ngreen\n)\n\n\nplot_obstacle\n(\ngreen\n,\n \nedgecolor\n \n=\n \n(\n56\n/\n255\n,\n \n152\n/\n255\n,\n \n38\n/\n255\n),\n\n\nfacecolor\n \n=\n \n(\n96\n/\n255\n,\n \n173\n/\n255\n,\n \n81\n/\n255\n),\n \nlinewidth\n \n=\n \newidth\n)\n\n\n\npush!\n(\nbt\n,\n \nred\n,\n \npurple\n,\n \ngreen\n)\n\n\n# particle colors\n\n\ndarkblue\n \n=\n \n(\n64\n/\n255\n,\n \n99\n/\n255\n,\n \n216\n/\n255\n)\n\n\nlightblue\n \n=\n \n(\n102\n/\n255\n,\n \n130\n/\n255\n,\n \n223\n/\n255\n)\n\n\n\np\n \n=\n \nrandominside\n(\nbt\n,\n \n2.0\n)\n\n\n\nPyPlot\n.\naxis\n(\noff\n)\n\n\nPyPlot\n.\ntight_layout\n()\n\n\nPyPlot\n.\ngca\n()[\n:\nset_aspect\n](\nequal\n)\n\n\nPyPlot\n.\nxlim\n(\n-\n0.1\n,\n1.1\n)\n\n\nPyPlot\n.\nylim\n(\n-\n0.1\n,\n1.1\n)\n\n\n\nokwargs\n \n=\n \nDict\n(\n:\nlinewidth\n \n=\n \n2.0\n,\n \n:\ncolor\n \n=\n \nlightblue\n)\n\n\npkwargs\n \n=\n \nDict\n(\n:\ncolor\n \n=\n \ndarkblue\n,\n \n:\ns\n \n=\n \n150.0\n)\n\n\n\n# create and save the animation:\n\n\nsname\n \n=\n \nC:\n\\\\\n***\n\\\\\nanim\n\n\nanimate_evolution\n(\np\n,\n \nbt\n,\n \n200\n;\n \ncol_to_plot\n \n=\n \n7\n,\n\n\nparticle_kwargs\n \n=\n \npkwargs\n,\n \norbit_kwargs\n \n=\n \nokwargs\n,\n\n\nsavefigs\n \n=\n \ntrue\n,\n \nsavename\n \n=\n \nsname\n)\n\n\n\n\n\n\nproduces:\n\n\n\n\nThe function \nbilliard_julia(plotit = true)\n wraps this code, just for fun!\n\n\n\n\nMean Free Path of the Lorentz Gas\n\n\nusing\n \nDynamicalBilliards\n\n\nbt\n \n=\n \nbilliard_lorentz\n(\n0.2\n)\n \n#alias for billiard_sinai(setting = \nperiodic\n)\n\n\nmfp\n \n=\n \n0.0\n\n\nfor\n \ni\n \nin\n \n1\n:\n1000\n\n  \np\n \n=\n \nrandominside\n(\nbt\n)\n\n  \nct\n,\n \nposs\n,\n \nvels\n \n=\n \nevolve!\n(\np\n,\n \nbt\n,\n \n10000.0\n)\n\n  \n#skip first two entries because they are not \nfull\n collisions:\n\n  \nmfp\n \n+=\n \nmean\n(\nct\n[\n3\n:\nend\n])\n\n\nend\n\n\nmfp\n \n/=\n \n1000\n\n\n\n\n\n\ngives the value of \n2.1899...\n which is very close to the analytic result:\n\n\n$\\text{m.f.p.} =  \\frac{1-\\pi r^2 }{2r} \\stackrel{r=0.2}{=} 2.18584$\n\n\nwhich you can find for example \nhere\n.", 
            "title": "Examples"
        }, 
        {
            "location": "/tutorials/examples/#julia-logo-billiard", 
            "text": "using   DynamicalBilliards ,   PyPlot  bt   =   Obstacle []  bt   =   billiard_rectangle ()  for   w   in   bt \n   plot_obstacle ( w ;   color   =   ( 0 , 0 , 0 ,   1 ),   linewidth   =   3.0 )  end  r   =   0.165  ewidth   =   6.0  redcent   =   [ 0.28 ,   0.32 ]  red   =   Disk ( redcent ,   r ,   red )  plot_obstacle ( red ;   edgecolor   =   ( 203 / 255 ,   60 / 255 ,   51 / 255 ),  facecolor   =   ( 213 / 255 ,   99 / 255 ,   92 / 255 ),   linewidth   =   ewidth )  purple   =   Disk ([ 1   -   redcent [ 1 ],   redcent [ 2 ]],   r ,   purple )  plot_obstacle ( purple ;   edgecolor   =   ( 149 / 255 ,   88 / 255 ,   178 / 255 ),  facecolor   =   ( 170 / 255 ,   121 / 255 ,   193 / 255 ),   linewidth   =   ewidth )  green   =   Disk ([ 0.5 ,   1   -   redcent [ 2 ]],   r ,   green )  plot_obstacle ( green ,   edgecolor   =   ( 56 / 255 ,   152 / 255 ,   38 / 255 ),  facecolor   =   ( 96 / 255 ,   173 / 255 ,   81 / 255 ),   linewidth   =   ewidth )  push! ( bt ,   red ,   purple ,   green )  # particle colors  darkblue   =   ( 64 / 255 ,   99 / 255 ,   216 / 255 )  lightblue   =   ( 102 / 255 ,   130 / 255 ,   223 / 255 )  p   =   randominside ( bt ,   2.0 )  PyPlot . axis ( off )  PyPlot . tight_layout ()  PyPlot . gca ()[ : set_aspect ]( equal )  PyPlot . xlim ( - 0.1 , 1.1 )  PyPlot . ylim ( - 0.1 , 1.1 )  okwargs   =   Dict ( : linewidth   =   2.0 ,   : color   =   lightblue )  pkwargs   =   Dict ( : color   =   darkblue ,   : s   =   150.0 )  # create and save the animation:  sname   =   C: \\\\ *** \\\\ anim  animate_evolution ( p ,   bt ,   200 ;   col_to_plot   =   7 ,  particle_kwargs   =   pkwargs ,   orbit_kwargs   =   okwargs ,  savefigs   =   true ,   savename   =   sname )   produces:   The function  billiard_julia(plotit = true)  wraps this code, just for fun!", 
            "title": "Julia-logo Billiard"
        }, 
        {
            "location": "/tutorials/examples/#mean-free-path-of-the-lorentz-gas", 
            "text": "using   DynamicalBilliards  bt   =   billiard_lorentz ( 0.2 )   #alias for billiard_sinai(setting =  periodic )  mfp   =   0.0  for   i   in   1 : 1000 \n   p   =   randominside ( bt ) \n   ct ,   poss ,   vels   =   evolve! ( p ,   bt ,   10000.0 ) \n   #skip first two entries because they are not  full  collisions: \n   mfp   +=   mean ( ct [ 3 : end ])  end  mfp   /=   1000   gives the value of  2.1899...  which is very close to the analytic result:  $\\text{m.f.p.} =  \\frac{1-\\pi r^2 }{2r} \\stackrel{r=0.2}{=} 2.18584$  which you can find for example  here .", 
            "title": "Mean Free Path of the Lorentz Gas"
        }, 
        {
            "location": "/basic/library/", 
            "text": "Below you find all the docstrings of all exported names of \nDynamicalBilliards.jl\n in convenient groups.\n\n\n\n\nStandard Billiards\n\n\n#\n\n\nDynamicalBilliards.billiard_rectangle\n \n \nFunction\n.\n\n\nbilliard_rectangle\n(\nx\n=\n1.0\n,\n \ny\n=\n1.0\n;\n \nsetting\n \n=\n \nstandard\n)\n\n\n\n\n\n\nReturn a vector of obstacles that defines a rectangle billiard of size (\nx\n, \ny\n).\n\n\nSettings\n\n\n\n\n\"standard\" : Specular reflection occurs during collision.\n\n\n\"periodic\" : The walls are \nPeriodicWall\n type, enforcing periodicity at the boundaries\n\n\n\"random\" : The velocity is randomized upon collision.\n\n\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.billiard_sinai\n \n \nFunction\n.\n\n\nbilliard_sinai\n(\nr\n=\n0.25\n,\n \nx\n=\n1.0\n,\n \ny\n=\n1.0\n;\n \nsetting\n \n=\n \nstandard\n)\n\n\n\n\n\n\nReturn a vector of obstacles that defines a Sinai billiard of size (\nx\n, \ny\n) with a disk in its center, of radius \nr\n.\n\n\nIn the periodic case, the system is also known as \"Lorentz Gas\".\n\n\nSettings\n\n\n\n\n\"standard\" : Specular reflection occurs during collision.\n\n\n\"periodic\" : The walls are \nPeriodicWall\n type, enforcing periodicity at the boundaries\n\n\n\"random\" : The velocity is randomized upon collision.\n\n\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.billiard_polygon\n \n \nFunction\n.\n\n\nbilliard_polygon\n(\nn\n::\nInt\n,\n \nR\n,\n \ncenter\n \n=\n \n[\n0\n,\n0\n]\n;\n \nperiodic\n \n=\n \ntrue\n)\n\n\n\n\n\n\nReturn a vector of obstacles that defines a regular-polygonal billiard table with \nn\n sides, radius \nr\n and given \ncenter\n. If \nn\n is even, you may choose a periodic version of the billiard.\n\n\nNote: \nR\n denotes the so-called outer radius, not the inner one.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.billiard_julia\n \n \nFunction\n.\n\n\nbilliard_julia\n(;\n \nplotit\n \n=\n \ntrue\n)\n\n\n\n\n\n\nReturn the awesome \"Julia-logo\" billiard shown in the introduction of DynamicalBilliards.jl.\n\n\nBy default it also plots the billiard in a new \nPyPlot.figure()\n using the correct colors.\n\n\nsource\n\n\n\n\nParticles\n\n\n#\n\n\nDynamicalBilliards.Particle\n \n \nType\n.\n\n\nParticle \n: AbstractParticle\n\n\n\n\n\nTwo-dimensional particle in a billiard table.\n\n\nFields:\n\n\n\n\npos::SVector{2,Float64}\n : Current position vector.\n\n\nvel::SVector{2,Float64}\n : Current velocity vector (always of measure 1).\n\n\ncurrent_cell::SVector{2,Float64}\n : Current \"cell\" the particle is located at. (Used only in periodic billiards)\n\n\n\n\nAdditional constructors:\n\n\nParticle\n{\nT\n:\nReal\n}(\nic\n::\nVector\n{\nT\n})\n \n#where ic = [x0, y0, \u03c60]\n\n\nParticle\n(\nx\n::\nReal\n,\n \ny\n::\nReal\n,\n \n\u03c6\n::\nReal\n)\n\n\nParticle\n()\n \n=\n \nParticle\n(\nrand\n(),\n \nrand\n(),\n \nrand\n()\n*\n2\n\u03c0\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.MagneticParticle\n \n \nType\n.\n\n\nMagneticParticle \n: AbstractParticle\n\n\n\n\n\nTwo-dimensional particle in a billiard table with perpendicular magnetic field.\n\n\nFields:\n\n\n\n\npos::SVector{2,Float64}\n : Current position vector.\n\n\nvel::SVector{2,Float64}\n : Current velocity vector (always of measure 1).\n\n\ncurrent_cell::SVector{2,Float64}\n : Current \"cell\" the particle is located at. (Used only in periodic billiards)\n\n\nomega::Float64\n : Angular velocity (cyclic frequency) of rotational motion. Radius of rotation is \nr=1/omega\n.\n\n\n\n\nAdditional constructors:\n\n\nMagneticParticle\n{\nT\n:\nReal\n}(\nic\n::\nVector\n{\nT\n},\n \n\u03c9\n::\nReal\n)\n \n#where ic = [x0, y0, \u03c60]\n\n\nMagneticParticle\n(\nx0\n::\nReal\n,\n \ny0\n::\nReal\n,\n \n\u03c60\n::\nReal\n,\n \n\u03c9\n::\nReal\n)\n\n\nMagneticParticle\n()\n \n=\n \nMagneticParticle\n([\nrand\n(),\n \nrand\n(),\n \nrand\n()\n*\n2\n\u03c0\n],\n \n1.0\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.magnetic2standard\n \n \nFunction\n.\n\n\nmagnetic2standard\n(\np\n::\nMagneticParticle\n,\n \nuse_cell\n \n=\n \ntrue\n)\n\n\n\n\n\n\nCreate a standard \nParticle\n from a \nMagneticParticle\n.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.standard2magnetic\n \n \nFunction\n.\n\n\nstandard2magnetic\n(\nomega\n,\n \np\n::\nParticle\n,\n \nuse_cell\n \n=\n \ntrue\n)\n\n\n\n\n\n\nCreate a \nMagneticParticle\n from a \nParticle\n.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.cyclotron\n \n \nFunction\n.\n\n\ncyclotron\n(\np\n::\nMagneticParticle\n,\n \nuse_cell\n \n=\n \nfalse\n)\n\n\n\n\n\n\nReturn center and radius of circular motion performed by the particle based on \np.pos\n (or \np.pos + p.current_cell\n) and \np.vel\n.\n\n\nsource\n\n\n\n\nObstacles\n\n\n#\n\n\nDynamicalBilliards.Obstacle\n \n \nType\n.\n\n\nObstacle\n\n\n\n\n\nObstacle supertype.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.Circular\n \n \nType\n.\n\n\nCircular \n: Obstacle\n\n\n\n\n\nCircular obstacle supertype.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.Disk\n \n \nType\n.\n\n\nDisk \n: Circular\n\n\n\n\n\nDisk-like obstacle with propagation allowed outside of the circle.\n\n\nFields:\n\n\n\n\nc::SVector{2,Float64}\n : Center.\n\n\nr::Float64\n : Radius.\n\n\nname::String\n : Some name given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.RandomDisk\n \n \nType\n.\n\n\nRandomDisk \n: Circular\n\n\n\n\n\nDisk-like obstacle that randomly (and uniformly) reflects colliding particles. The propagation is allowed outside of the circle.\n\n\nFields:\n\n\n\n\nc::SVector{2,Float64}\n : Center.\n\n\nr::Float64\n : Radius.\n\n\nname::String\n : Some name given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.Antidot\n \n \nType\n.\n\n\nAntidot \n: Circular\n\n\n\n\n\nDisk-like obstacle that allows propagation both inside and outside of the disk. Used in ray-splitting billiards.\n\n\nFields:\n\n\n\n\nc::SVector{2,Float64}\n : Center.\n\n\nr::Float64\n : Radius.\n\n\nwhere::Bool\n : Flag that keeps track of where the particle is currently propagating. \ntrue\n stands for \noutside\n the disk, \nfalse\n for \ninside\n the disk.\n\n\nname::String\n : Name of the obstacle given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.Wall\n \n \nType\n.\n\n\nWall \n: Obstacle\n\n\n\n\n\nWall obstacle supertype.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.FiniteWall\n \n \nType\n.\n\n\nFiniteWall \n: Wall\n\n\n\n\n\nWall obstacle imposing specular reflection during collision.\n\n\nFields:\n\n\n\n\nsp::SVector{2,Float64}\n : Starting point of the Wall.\n\n\nep::SVector{2,Float64}\n : Ending point of the Wall.\n\n\nnormal::SVector{2,Float64}\n : Normal vector to the wall, pointing to where the particle \nwill come from before a collision\n (pointing towards the inside of the billiard table). The size of the vector is irrelevant.\n\n\nname::String\n : Name of the obstacle, e.g. \"left wall\", given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.RandomWall\n \n \nType\n.\n\n\nRandomWall \n: Wall\n\n\n\n\n\nWall obstacle imposing (uniformly) random reflection during collision.\n\n\nFields:\n\n\n\n\nsp::SVector{2,Float64}\n : Starting point of the Wall.\n\n\nep::SVector{2,Float64}\n : Ending point of the Wall.\n\n\nnormal::SVector{2,Float64}\n : Normal vector to the wall, pointing to where the particle \nis expected to come from\n (pointing towards the inside of the billiard table). The size of the vector is irrelevant.\n\n\nname::String\n : Name of the obstacle, e.g. \"random wall\", given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.PeriodicWall\n \n \nType\n.\n\n\nPeriodicWall \n: Wall\n\n\n\n\n\nWall obstacle that imposes periodic boundary conditions upon collision.\n\n\nFields:\n\n\n\n\nsp::SVector{2,Float64}\n : Starting point of the Wall.\n\n\nep::SVector{2,Float64}\n : Ending point of the Wall.\n\n\nnormal::SVector{2,Float64}\n : Normal vector to the wall, pointing to where the particle \nwill come from\n (to the inside the billiard table). The size of the vector is \nimportant\n! This vector is added to a particle's \npos\n during collision. Therefore the size of the normal vector must be correctly associated with the size of the periodic cell.\n\n\nname::String\n : Name of the obstacle, e.g. \"left boundary\", given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.SplitterWall\n \n \nType\n.\n\n\nSplitterWall \n: Wall\n\n\n\n\n\nWall obstacle imposing specular reflection during collision.\n\n\nFields:\n\n\n\n\nsp::SVector{2,Float64}\n : Starting point of the Wall.\n\n\nep::SVector{2,Float64}\n : Ending point of the Wall.\n\n\nnormal::SVector{2,Float64}\n : Normal vector to the wall, pointing to where the particle \nwill come from before a collision\n. The size of the vector is irrelevant.\n\n\nwhere::Bool\n : Flag that keeps track of where the particle is currently propagating. \ntrue\n is associated with the \nnormal\n vector the wall is instantiated with.\n\n\nname::String\n : Name of the obstacle, e.g. \"ray-splitting wall 1\", given for user convenience.\n\n\n\n\nConstructors accept any vectors convertible to SVector{2,Float64}.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.normalvec\n \n \nFunction\n.\n\n\nnormalvec\n(\nobst\n::\nObstacle\n,\n \nposition\n)\n\n\n\n\n\n\nReturn the vector normal to the obstacle at the given position (which is assumed to be very close to the obstacle's boundary). The normal vector of any Obstacle must be looking towards the direction a particle is expected to come from.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.distance\n \n \nFunction\n.\n\n\ndistance\n(\np\n::\nAbstractParticle\n,\n \no\n::\nObstacle\n)\n\n\n\n\n\n\nReturn the \nsigned\n distance between particle \np\n and obstacle \no\n, based on \np.pos\n. Positive distance corresponds to the particle being on the \nallowed\n region of the Obstacle. E.g. for a \nDisk\n, the distance is positive when the particle is outside of the disk, negative otherwise.\n\n\ndistance\n(\np\n::\nAbstractParticle\n,\n \nbt\n::\nVector\n{\nObstacle\n})\n\n\n\n\n\n\nReturn minimum \ndistance(p, obst)\n for all \nobst\n in \nbt\n, which should be positive.\n\n\nIf the \ndistance(p, bt)\n is negative this means that the particle is outside the billiard table. If this was \nnot\n intended, please file an error immediately!\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.randominside\n \n \nFunction\n.\n\n\nrandominside\n(\nbt\n::\nVector\n{\nObstacle\n}[,\n \nomega\n])\n\n\n\n\n\n\nReturn a particle with correct (allowed) initial conditions inside the given billiard table defined by the vector \nbt\n. If supplied with a second argument the type of the returned particle is \nMagneticParticle\n, with angular velocity \nomega\n. Else, it is \nParticle\n.\n\n\nsource\n\n\n\n\nPropagation\n\n\nresolvecollision!\nrelocate!\nspecular!\nlct\nperiodicity!\ncollisiontime\npropagate!\nevolve!\nconstruct\nrealangle\n\n\n\n\n\n\n\nRay-splitting\n\n\n#\n\n\nDynamicalBilliards.isphysical\n \n \nFunction\n.\n\n\nisphysical\n(\nraysplitter\n::\nDict\n{\nInt,\n \nVector{Function\n}\n}\n;\n \nonly_mandatory\n \n=\n \nfalse\n)\n\n\n\n\n\n\nReturn \ntrue\n if the given ray-splitting dictionary represends the physical world.\n\n\nSpecifically, check if (\u03c6 is the incidence angle):\n\n\n\n\nCritical angle means total reflection: If \u03b8(\u03c6) \u2265 \u03c0/2 then T(\u03c6) = 0\n\n\nTransmission probability is even function: T(\u03c6) \u2248 T(-\u03c6)\n\n\nRefraction angle is odd function: \u03b8(\u03c6) \u2248 -\u03b8(-\u03c6)\n\n\nRay reversal is true: \u03b8(\u03b8(\u03c6, where, \u03c9), !where, \u03c9) \u2248 \u03c6\n\n\nMagnetic conservation is true: (\u03c9_new(\u03c9_new(\u03c9, where), !where) \u2248 \u03c9\n\n\n\n\nThe first property is mandatory and must hold for correct propagation. The above tests are done for all possible combinations of arguments.\n\n\nThey keyword \nonly_mandatory\n notes whether the rest of the properties should be tested or not.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.acceptable_raysplitter\n \n \nFunction\n.\n\n\nacceptable_raysplitter\n(\nraysplitter\n,\n \nbt\n)\n\n\n\n\n\n\nCheck if the given ray-splitting dictionary \nraysplitter\n can be used in conjuction with given billiard table \nbt\n.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.supports_raysplitting\n \n \nFunction\n.\n\n\nsupports_raysplitting\n(\nobst\n::\nObstacle\n)\n\n\n\n\n\n\nReturn \ntrue\n if the given obstacle supports ray-splitting.\n\n\nsource\n\n\n\n\nVisualization\n\n\n#\n\n\nDynamicalBilliards.plot_obstacle\n \n \nFunction\n.\n\n\nplot_obstacle\n(\nobst\n::\nObstacle\n;\n \nkwargs\n...\n)\n\n\n\n\n\n\nPlot given obstacle on the current \nPyPlot\n figure.\n\n\nThe default arguments for each type of obstacle have been chosen for maximum clarity and consistency.\n\n\nThe \nkwargs...\n given by the user are keywords passed directly into PyPlot's constructors. For \nWall\n obstacles, kwargs are passed into \nPyPlot.plot()\n. For \nDisk\n obstacles, kwargs are passed into \nPyPlot.plt[:Circle]()\n.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.plot_billiard\n \n \nFunction\n.\n\n\nplot_billiard\n(\nbt\n::\nVector\n{\nObstacle\n})\n\n\n\n\n\n\nPlot all obstacles in \nbt\n using the default arguments, set \nxlim\n and \nylim\n to be 10% larger than \ncellsize\n and set the axis aspect ratio to equal.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.plot_particle\n \n \nFunction\n.\n\n\nplot_particle\n(\np\n::\nAbstractParticle\n;\n \nuse_cell\n=\ntrue\n,\n \nkwargs\n...\n)\n\n\n\n\n\n\nPlot given particle on the current \nPyPlot\n figure. Optionally use \np.current_cell\n for the particle's position. Given \nkwargs...\n are passed onto \nPyPlot.scatter()\n.\n\n\nThe particle is represented as a small ball (\nPyPlot.scatter()\n) and a small arrow (\nPyPlot.quiver()\n). All \nkwargs...\n are given to \nscatter()\n but if a keyword argument \ncolor\n is given, it is also passed to \nquiver()\n.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.plot_cyclotron\n \n \nFunction\n.\n\n\nplot_cyclotron\n(\np\n::\nMagneticParticle\n;\n \nuse_cell\n=\ntrue\n,\n \nkwargs\n...\n)\n\n\n\n\n\n\nPlot the circle traced by the free particle motion. Optionally use \np.current_cell\n for the particle's position. The user provided \nkwargs...\n are passed onto \nPyPlot.plt[:Circle]()\n.\n\n\nsource\n\n\n#\n\n\nDynamicalBilliards.animate_evolution\n \n \nFunction\n.\n\n\nanimate_evolution\n(\np\n,\n \nbt\n,\n \ncolnumber\n[,\n \nray\n-\nsplitter\n];\n \nkwargs\n)\n\n\n\n\n\n\nAnimate the evolution of the particle, plotting the orbit from collision to collision.\n\n\nNotice the difference with \nevolve!()\n: No time is given here; instead a number of collisions is passed.\n\n\nArguments\n\n\n\n\np::AbstractParticle\n : Either standard or magnetic.\n\n\nbt::Vector{Obstacle}\n : The billiard table.\n\n\ncolnumber::Int\n : Number of collisions to evolve the particle for.\n\n\nray-splitter::Dict{Int, Vector{Function}}\n : (Optional) Ray-splitting dictionary that enables ray-splitting processes during evolution.\n\n\n\n\nKeyword Arguments\n\n\n\n\nsleeptime\n : Time passed to \nsleep()\n between each collision.\n\n\ncol_to_plot\n : How many previous collisions are shown during the animation.\n\n\nsavefigs\n : Save .png figures to enable the creation of animation afterwards. \nWARNING:\n currently the .gif production has to be made by the user!\n\n\nsavename\n : Name (\nincluding path!\n) of the figures to be produced. The ending \"_i.png\" will be attached to all figures.\n\n\nparticle_kwargs\n : Either a Dict{Symbol, Any} or a vector of Tuple{Symbol, Any}. Keywords passed into \nplot_particle()\n.\n\n\norbit_kwargs\n : Either a Dict{Symbol, Any} or a Vector of Tuple{Symbol, Any}. Keywords passed into \nPyPlot.plot()\n which plots the orbit of the particle.\n\n\n\n\nsource", 
            "title": "Library"
        }, 
        {
            "location": "/basic/library/#standard-billiards", 
            "text": "#  DynamicalBilliards.billiard_rectangle     Function .  billiard_rectangle ( x = 1.0 ,   y = 1.0 ;   setting   =   standard )   Return a vector of obstacles that defines a rectangle billiard of size ( x ,  y ).  Settings   \"standard\" : Specular reflection occurs during collision.  \"periodic\" : The walls are  PeriodicWall  type, enforcing periodicity at the boundaries  \"random\" : The velocity is randomized upon collision.   source  #  DynamicalBilliards.billiard_sinai     Function .  billiard_sinai ( r = 0.25 ,   x = 1.0 ,   y = 1.0 ;   setting   =   standard )   Return a vector of obstacles that defines a Sinai billiard of size ( x ,  y ) with a disk in its center, of radius  r .  In the periodic case, the system is also known as \"Lorentz Gas\".  Settings   \"standard\" : Specular reflection occurs during collision.  \"periodic\" : The walls are  PeriodicWall  type, enforcing periodicity at the boundaries  \"random\" : The velocity is randomized upon collision.   source  #  DynamicalBilliards.billiard_polygon     Function .  billiard_polygon ( n :: Int ,   R ,   center   =   [ 0 , 0 ] ;   periodic   =   true )   Return a vector of obstacles that defines a regular-polygonal billiard table with  n  sides, radius  r  and given  center . If  n  is even, you may choose a periodic version of the billiard.  Note:  R  denotes the so-called outer radius, not the inner one.  source  #  DynamicalBilliards.billiard_julia     Function .  billiard_julia (;   plotit   =   true )   Return the awesome \"Julia-logo\" billiard shown in the introduction of DynamicalBilliards.jl.  By default it also plots the billiard in a new  PyPlot.figure()  using the correct colors.  source", 
            "title": "Standard Billiards"
        }, 
        {
            "location": "/basic/library/#particles", 
            "text": "#  DynamicalBilliards.Particle     Type .  Particle  : AbstractParticle  Two-dimensional particle in a billiard table.  Fields:   pos::SVector{2,Float64}  : Current position vector.  vel::SVector{2,Float64}  : Current velocity vector (always of measure 1).  current_cell::SVector{2,Float64}  : Current \"cell\" the particle is located at. (Used only in periodic billiards)   Additional constructors:  Particle { T : Real }( ic :: Vector { T })   #where ic = [x0, y0, \u03c60]  Particle ( x :: Real ,   y :: Real ,   \u03c6 :: Real )  Particle ()   =   Particle ( rand (),   rand (),   rand () * 2 \u03c0 )   source  #  DynamicalBilliards.MagneticParticle     Type .  MagneticParticle  : AbstractParticle  Two-dimensional particle in a billiard table with perpendicular magnetic field.  Fields:   pos::SVector{2,Float64}  : Current position vector.  vel::SVector{2,Float64}  : Current velocity vector (always of measure 1).  current_cell::SVector{2,Float64}  : Current \"cell\" the particle is located at. (Used only in periodic billiards)  omega::Float64  : Angular velocity (cyclic frequency) of rotational motion. Radius of rotation is  r=1/omega .   Additional constructors:  MagneticParticle { T : Real }( ic :: Vector { T },   \u03c9 :: Real )   #where ic = [x0, y0, \u03c60]  MagneticParticle ( x0 :: Real ,   y0 :: Real ,   \u03c60 :: Real ,   \u03c9 :: Real )  MagneticParticle ()   =   MagneticParticle ([ rand (),   rand (),   rand () * 2 \u03c0 ],   1.0 )   source  #  DynamicalBilliards.magnetic2standard     Function .  magnetic2standard ( p :: MagneticParticle ,   use_cell   =   true )   Create a standard  Particle  from a  MagneticParticle .  source  #  DynamicalBilliards.standard2magnetic     Function .  standard2magnetic ( omega ,   p :: Particle ,   use_cell   =   true )   Create a  MagneticParticle  from a  Particle .  source  #  DynamicalBilliards.cyclotron     Function .  cyclotron ( p :: MagneticParticle ,   use_cell   =   false )   Return center and radius of circular motion performed by the particle based on  p.pos  (or  p.pos + p.current_cell ) and  p.vel .  source", 
            "title": "Particles"
        }, 
        {
            "location": "/basic/library/#obstacles", 
            "text": "#  DynamicalBilliards.Obstacle     Type .  Obstacle  Obstacle supertype.  source  #  DynamicalBilliards.Circular     Type .  Circular  : Obstacle  Circular obstacle supertype.  source  #  DynamicalBilliards.Disk     Type .  Disk  : Circular  Disk-like obstacle with propagation allowed outside of the circle.  Fields:   c::SVector{2,Float64}  : Center.  r::Float64  : Radius.  name::String  : Some name given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.RandomDisk     Type .  RandomDisk  : Circular  Disk-like obstacle that randomly (and uniformly) reflects colliding particles. The propagation is allowed outside of the circle.  Fields:   c::SVector{2,Float64}  : Center.  r::Float64  : Radius.  name::String  : Some name given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.Antidot     Type .  Antidot  : Circular  Disk-like obstacle that allows propagation both inside and outside of the disk. Used in ray-splitting billiards.  Fields:   c::SVector{2,Float64}  : Center.  r::Float64  : Radius.  where::Bool  : Flag that keeps track of where the particle is currently propagating.  true  stands for  outside  the disk,  false  for  inside  the disk.  name::String  : Name of the obstacle given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.Wall     Type .  Wall  : Obstacle  Wall obstacle supertype.  source  #  DynamicalBilliards.FiniteWall     Type .  FiniteWall  : Wall  Wall obstacle imposing specular reflection during collision.  Fields:   sp::SVector{2,Float64}  : Starting point of the Wall.  ep::SVector{2,Float64}  : Ending point of the Wall.  normal::SVector{2,Float64}  : Normal vector to the wall, pointing to where the particle  will come from before a collision  (pointing towards the inside of the billiard table). The size of the vector is irrelevant.  name::String  : Name of the obstacle, e.g. \"left wall\", given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.RandomWall     Type .  RandomWall  : Wall  Wall obstacle imposing (uniformly) random reflection during collision.  Fields:   sp::SVector{2,Float64}  : Starting point of the Wall.  ep::SVector{2,Float64}  : Ending point of the Wall.  normal::SVector{2,Float64}  : Normal vector to the wall, pointing to where the particle  is expected to come from  (pointing towards the inside of the billiard table). The size of the vector is irrelevant.  name::String  : Name of the obstacle, e.g. \"random wall\", given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.PeriodicWall     Type .  PeriodicWall  : Wall  Wall obstacle that imposes periodic boundary conditions upon collision.  Fields:   sp::SVector{2,Float64}  : Starting point of the Wall.  ep::SVector{2,Float64}  : Ending point of the Wall.  normal::SVector{2,Float64}  : Normal vector to the wall, pointing to where the particle  will come from  (to the inside the billiard table). The size of the vector is  important ! This vector is added to a particle's  pos  during collision. Therefore the size of the normal vector must be correctly associated with the size of the periodic cell.  name::String  : Name of the obstacle, e.g. \"left boundary\", given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.SplitterWall     Type .  SplitterWall  : Wall  Wall obstacle imposing specular reflection during collision.  Fields:   sp::SVector{2,Float64}  : Starting point of the Wall.  ep::SVector{2,Float64}  : Ending point of the Wall.  normal::SVector{2,Float64}  : Normal vector to the wall, pointing to where the particle  will come from before a collision . The size of the vector is irrelevant.  where::Bool  : Flag that keeps track of where the particle is currently propagating.  true  is associated with the  normal  vector the wall is instantiated with.  name::String  : Name of the obstacle, e.g. \"ray-splitting wall 1\", given for user convenience.   Constructors accept any vectors convertible to SVector{2,Float64}.  source  #  DynamicalBilliards.normalvec     Function .  normalvec ( obst :: Obstacle ,   position )   Return the vector normal to the obstacle at the given position (which is assumed to be very close to the obstacle's boundary). The normal vector of any Obstacle must be looking towards the direction a particle is expected to come from.  source  #  DynamicalBilliards.distance     Function .  distance ( p :: AbstractParticle ,   o :: Obstacle )   Return the  signed  distance between particle  p  and obstacle  o , based on  p.pos . Positive distance corresponds to the particle being on the  allowed  region of the Obstacle. E.g. for a  Disk , the distance is positive when the particle is outside of the disk, negative otherwise.  distance ( p :: AbstractParticle ,   bt :: Vector { Obstacle })   Return minimum  distance(p, obst)  for all  obst  in  bt , which should be positive.  If the  distance(p, bt)  is negative this means that the particle is outside the billiard table. If this was  not  intended, please file an error immediately!  source  #  DynamicalBilliards.randominside     Function .  randominside ( bt :: Vector { Obstacle }[,   omega ])   Return a particle with correct (allowed) initial conditions inside the given billiard table defined by the vector  bt . If supplied with a second argument the type of the returned particle is  MagneticParticle , with angular velocity  omega . Else, it is  Particle .  source", 
            "title": "Obstacles"
        }, 
        {
            "location": "/basic/library/#propagation", 
            "text": "resolvecollision!\nrelocate!\nspecular!\nlct\nperiodicity!\ncollisiontime\npropagate!\nevolve!\nconstruct\nrealangle", 
            "title": "Propagation"
        }, 
        {
            "location": "/basic/library/#ray-splitting", 
            "text": "#  DynamicalBilliards.isphysical     Function .  isphysical ( raysplitter :: Dict { Int,   Vector{Function } } ;   only_mandatory   =   false )   Return  true  if the given ray-splitting dictionary represends the physical world.  Specifically, check if (\u03c6 is the incidence angle):   Critical angle means total reflection: If \u03b8(\u03c6) \u2265 \u03c0/2 then T(\u03c6) = 0  Transmission probability is even function: T(\u03c6) \u2248 T(-\u03c6)  Refraction angle is odd function: \u03b8(\u03c6) \u2248 -\u03b8(-\u03c6)  Ray reversal is true: \u03b8(\u03b8(\u03c6, where, \u03c9), !where, \u03c9) \u2248 \u03c6  Magnetic conservation is true: (\u03c9_new(\u03c9_new(\u03c9, where), !where) \u2248 \u03c9   The first property is mandatory and must hold for correct propagation. The above tests are done for all possible combinations of arguments.  They keyword  only_mandatory  notes whether the rest of the properties should be tested or not.  source  #  DynamicalBilliards.acceptable_raysplitter     Function .  acceptable_raysplitter ( raysplitter ,   bt )   Check if the given ray-splitting dictionary  raysplitter  can be used in conjuction with given billiard table  bt .  source  #  DynamicalBilliards.supports_raysplitting     Function .  supports_raysplitting ( obst :: Obstacle )   Return  true  if the given obstacle supports ray-splitting.  source", 
            "title": "Ray-splitting"
        }, 
        {
            "location": "/basic/library/#visualization", 
            "text": "#  DynamicalBilliards.plot_obstacle     Function .  plot_obstacle ( obst :: Obstacle ;   kwargs ... )   Plot given obstacle on the current  PyPlot  figure.  The default arguments for each type of obstacle have been chosen for maximum clarity and consistency.  The  kwargs...  given by the user are keywords passed directly into PyPlot's constructors. For  Wall  obstacles, kwargs are passed into  PyPlot.plot() . For  Disk  obstacles, kwargs are passed into  PyPlot.plt[:Circle]() .  source  #  DynamicalBilliards.plot_billiard     Function .  plot_billiard ( bt :: Vector { Obstacle })   Plot all obstacles in  bt  using the default arguments, set  xlim  and  ylim  to be 10% larger than  cellsize  and set the axis aspect ratio to equal.  source  #  DynamicalBilliards.plot_particle     Function .  plot_particle ( p :: AbstractParticle ;   use_cell = true ,   kwargs ... )   Plot given particle on the current  PyPlot  figure. Optionally use  p.current_cell  for the particle's position. Given  kwargs...  are passed onto  PyPlot.scatter() .  The particle is represented as a small ball ( PyPlot.scatter() ) and a small arrow ( PyPlot.quiver() ). All  kwargs...  are given to  scatter()  but if a keyword argument  color  is given, it is also passed to  quiver() .  source  #  DynamicalBilliards.plot_cyclotron     Function .  plot_cyclotron ( p :: MagneticParticle ;   use_cell = true ,   kwargs ... )   Plot the circle traced by the free particle motion. Optionally use  p.current_cell  for the particle's position. The user provided  kwargs...  are passed onto  PyPlot.plt[:Circle]() .  source  #  DynamicalBilliards.animate_evolution     Function .  animate_evolution ( p ,   bt ,   colnumber [,   ray - splitter ];   kwargs )   Animate the evolution of the particle, plotting the orbit from collision to collision.  Notice the difference with  evolve!() : No time is given here; instead a number of collisions is passed.  Arguments   p::AbstractParticle  : Either standard or magnetic.  bt::Vector{Obstacle}  : The billiard table.  colnumber::Int  : Number of collisions to evolve the particle for.  ray-splitter::Dict{Int, Vector{Function}}  : (Optional) Ray-splitting dictionary that enables ray-splitting processes during evolution.   Keyword Arguments   sleeptime  : Time passed to  sleep()  between each collision.  col_to_plot  : How many previous collisions are shown during the animation.  savefigs  : Save .png figures to enable the creation of animation afterwards.  WARNING:  currently the .gif production has to be made by the user!  savename  : Name ( including path! ) of the figures to be produced. The ending \"_i.png\" will be attached to all figures.  particle_kwargs  : Either a Dict{Symbol, Any} or a vector of Tuple{Symbol, Any}. Keywords passed into  plot_particle() .  orbit_kwargs  : Either a Dict{Symbol, Any} or a Vector of Tuple{Symbol, Any}. Keywords passed into  PyPlot.plot()  which plots the orbit of the particle.   source", 
            "title": "Visualization"
        }
    ]
}